@charset "UTF-8";
// DOCUMENTATION: https://www.bourbon.io/docs/5.1.0/#font-face

/// Generates an `@font-face` declaration. You can choose the specific file
/// formats you need to output; the mixin supports `eot`, `ttf`, `svg`, `woff2`
/// and `woff`. The mixin also supports usage with the Rails Asset Pipeline,
/// which you can enable per use, or globally in the `$bourbon()` settings.
///
/// @argument {string} $font-family
///
/// @argument {string} $file-path
///
/// @argument {string | list} $file-formats [("ttf", "woff2", "woff")]
///   List of the font file formats to include. Can also be set globally using
///   the `global-font-file-formats` key in the Bourbon settings.
///
/// @argument {boolean} $asset-pipeline [false]
///   Set to `true` if youâ€™re using the Rails Asset Pipeline (place the fonts
///   in `app/assets/fonts/`). Can also be set globally using the
///   `rails-asset-pipeline` key in the Bourbon settings.
///
/// @content
///   Any additional CSS properties that are included in the `@include`
///   directive will be output within the `@font-face` declaration, e.g. you can
///   pass in `font-weight`, `font-style` and/or `unicode-range`.
///
/// @example scss
///   @include font-face(
///     "source-sans-pro",
///     "fonts/source-sans-pro-regular",
///     ("woff2", "woff")
///   ) {
///     font-style: normal;
///     font-weight: 400;
///   }
///
///   // CSS Output
///   @font-face {
///     font-family: "source-sans-pro";
///     src: url("fonts/source-sans-pro-regular.woff2") format("woff2"),
///          url("fonts/source-sans-pro-regular.woff") format("woff");
///     font-style: normal;
///     font-weight: 400;
///   }
///
/// @require {function} _font-source-declaration
/// Builds the `src` list for an `@font-face` declaration.
///
/// @link https://goo.gl/Ru1bKP
///
/// @argument {string} $font-family
///
/// @argument {string} $file-path
///
/// @argument {boolean} $asset-pipeline
///
/// @argument {list} $file-formats
///
/// @return {list}
///
/// @require {function} _contains
///
/// @access private

@function _font-source-declaration(
  $font-family,
  $file-path,
  $asset-pipeline,
  $file-formats
) {
  $src: ();

  $formats-map: (
    eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
    woff2: "#{$file-path}.woff2" format("woff2"),
    woff:  "#{$file-path}.woff" format("woff"),
    ttf:   "#{$file-path}.ttf" format("truetype"),
    svg:   "#{$file-path}.svg##{$font-family}" format("svg"),
  );

  @each $format in $file-formats {
    @if _contains(map-keys($formats-map), $format) {
      $value: map-get($formats-map, $format);
      $file-path: nth($value, 1);
      $font-format: nth($value, 2);

      @if $asset-pipeline == true {
        $src: append($src, font-url($file-path) $font-format, comma);
      } @else {
        $src: append($src, url($file-path) $font-format, comma);
      }
    } @else {
      @error "`#{$file-formats}` contains an unsupported font file format. " +
             "Must be `eot`, `ttf`, `svg`, `woff` and/or `woff2`.";
    }
  }

  @return $src;
}

/// @require {function} _fetch-bourbon-setting

/// Return a Bourbon setting.
///
/// @argument {string} $setting
///
/// @return {boolean | color | list | number | string}
///
/// @example scss
///   _fetch-bourbon-setting(rails-asset-pipeline)
///
/// @access private

@function _fetch-bourbon-setting($setting) {
    @return map-get(map-merge($_bourbon-defaults, $bourbon), $setting);
  }

@mixin font-face(
  $font-family,
  $file-path,
  $file-formats: _fetch-bourbon-setting("global-font-file-formats"),
  $asset-pipeline: _fetch-bourbon-setting("rails-asset-pipeline")
) {
  @font-face {
    font-family: $font-family;
    src: _font-source-declaration(
      $font-family,
      $file-path,
      $asset-pipeline,
      $file-formats
    );
    @content;
  }
}